// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Get environment variables
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY;

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error('Missing Supabase environment variables');
}

// Get token from localStorage
const getAuthToken = () => {
  try {
    if (typeof window === 'undefined') return '';

    const tokenString = localStorage.getItem(`sb-${SUPABASE_URL.split('.')[0]}-auth-token`);
    if (tokenString) {
      try {
        const tokenData = JSON.parse(tokenString);
        return tokenData?.access_token || '';
      } catch (e) {
        console.error('Error parsing auth token:', e);
        return '';
      }
    }
    return '';
  } catch (error) {
    console.error('Error retrieving auth token:', error);
    return '';
  }
};

// Create client with dynamic auth headers
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storage: typeof window !== 'undefined' ? localStorage : undefined
  },
  global: {
    headers: {
      Authorization: `Bearer ${getAuthToken()}`
    }
  }
});

// Add an event listener to update headers when auth state changes
if (typeof window !== 'undefined') {
  supabase.auth.onAuthStateChange(() => {
    // Update global headers with new token
    const token = getAuthToken();
    
    // Update the auth token for edge functions
    supabase.functions.setAuth(token);
    
    // Log the token update for debugging
    console.log('Updated Supabase auth token after state change');
  });
}
